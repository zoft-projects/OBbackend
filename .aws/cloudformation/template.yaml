AWSTemplateFormatVersion: '2010-09-09'

Transform: AWS::Serverless-2016-10-31

Description: Serverless Express Application/API of onebayshore-backend-service powered by API Gateway and Lambda

Parameters:
  EnvironmentName:
    Description: Environment name for the application dev/uat/staging and production
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - uat
      - production
    ConstraintDescription: Specify either dev, staging , uat, production
  ApplicationName:
    Description: Application Name
    Type: String
    Default: onebayshore-backend-service
  StorageStackName:
    Description: Name of an active CloudFormation stack of storage resources
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
  CacheStackName:
    Description: Name of an active CloudFormation stack of cache resources
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
  RedisPort:
    Description: >-
      The port number on which each member of the replication group accepts
      connections.
    Type: Number
    Default: '6379'
    MinValue: '1'
    MaxValue: '65535'
  NetworkStackName:
    Description: Name of an active CloudFormation stack of networking resources
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
  ApiId:
    Description: One Bayshore public API Gateway Id
    Type: String
  LambdaProvisionedConcurrencyCount:
    Type: Number
    Description: Number of lambda provisioned concurrency
  OBAwsAccountId:
    Description: Account ID where OneBayshore Public API Gateway is deployed
    Type: String
  LambdaImage:
    Type: String
    Description: ECR Image URI and Tag
  SnsStackName:
    Description: Sns Topic Stack Name
    Type: String
  AvailabilityServiceHost:
    Description: SSM Param store containing DPD Integration Service Host
    Type: 'AWS::SSM::Parameter::Value<String>'
  AvailabilityServiceApiBaseUrl:
    Description: SSM Param store containing DPD integration Service Base URI
    Type: 'AWS::SSM::Parameter::Value<String>'
  BOSBackendServiceHost:
    Description: SSM Param store containing Event Service Host
    Type: 'AWS::SSM::Parameter::Value<String>'
  BOSBackendServiceApiBaseUrl:
    Description: SSM Param store containing Event Service Base URI
    Type: 'AWS::SSM::Parameter::Value<String>'
  DeleteWellnessImagesCronJobRate:
    Description: Rate at which to run 'delete wellness images' cron job
    Type: String
    Default: 1 hour

Mappings: {}

Conditions: {}

Resources:
  ApiGatewayExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ApiGwIntegrationLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${OBAwsAccountId}:${ApiId}/*/*'
        - OBAwsAccountId: !Sub ${OBAwsAccountId}
          ApiId: !Sub ${ApiId}
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup for Onebayshore Backend Service Lambda Function
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackName}-VpcId
      Tags:
        - Key: Project
          Value: !Sub '${EnvironmentName}-onebayshore'
  ApiGwIntegrationLambda:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageUri: !Ref LambdaImage
      ImageConfig:
        Command: ['index.handler']
      MemorySize: 512
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: !Ref LambdaProvisionedConcurrencyCount
      Timeout: 600
      FunctionName: !Sub ${EnvironmentName}-${ApplicationName}
      Environment:
        Variables:
          NODE_ENV: !Ref EnvironmentName
          REDIS_URL:
            Fn::ImportValue: !Sub ${CacheStackName}-RedisEndpoint
          REDIS_USERNAME:
            Fn::ImportValue: !Sub ${CacheStackName}-RedisUser
          REDIS_PASSWORD: !Sub '{{resolve:ssm:/${EnvironmentName}/dxp/config/redis/password1}}'
          BOS_BACKEND_SERVICE_HOST: !Ref BOSBackendServiceHost
          BOS_BACKEND_SERVICE_BASE_URI: !Ref BOSBackendServiceApiBaseUrl
          AVAILABILITY_SERVICE_HOST: !Ref AvailabilityServiceHost
          AVAILABILITY_SERVICE_BASE_URI: !Ref AvailabilityServiceApiBaseUrl
          AWS_LAMBDA_EXEC_WRAPPER: '/opt/dynatrace'
          DT_TENANT: !Sub '{{resolve:secretsmanager:${EnvironmentName}-dynatrace-secrets:SecretString:DT_TENANT}}'
          DT_CLUSTER_ID: !Sub '{{resolve:secretsmanager:${EnvironmentName}-dynatrace-secrets:SecretString:DT_CLUSTER_ID}}'
          DT_CONNECTION_BASE_URL: !Sub '{{resolve:secretsmanager:${EnvironmentName}-dynatrace-secrets:SecretString:DT_CONNECTION_BASE_URL}}'
          DT_CONNECTION_AUTH_TOKEN: !Sub '{{resolve:secretsmanager:${EnvironmentName}-dynatrace-secrets:SecretString:DT_CONNECTION_AUTH_TOKEN}}'
          DT_LOG_COLLECTION_AUTH_TOKEN: !Sub '{{resolve:secretsmanager:${EnvironmentName}-dynatrace-secrets:SecretString:DT_LOG_COLLECTION_AUTH_TOKEN}}'
          DT_OPEN_TELEMETRY_ENABLE_INTEGRATION: !Sub '{{resolve:secretsmanager:${EnvironmentName}-dynatrace-secrets:SecretString:DT_OPEN_TELEMETRY_ENABLE_INTEGRATION}}'
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:DescribeSecret
                - secretsmanager:GetSecretValue
                - secretsmanager:ListSecretVersionIds
                - secretsmanager:ListSecrets
              Resource:
                - !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${EnvironmentName}-onebayshore-secrets*
                - !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${EnvironmentName}-dynatrace-secrets*

            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:ListBucket
                - s3:PutObject
                - s3:DeleteObject
                - s3:DeleteObjectVersion
              Resource:
                - !Sub
                  - 'arn:${AWS::Partition}:s3:::${BucketName}/*'
                  - BucketName:
                      Fn::ImportValue: !Sub ${StorageStackName}-OneBayshoreBackendWidgetS3Bucket
                - !Sub
                  - 'arn:${AWS::Partition}:s3:::${BucketName}'
                  - BucketName:
                      Fn::ImportValue: !Sub ${StorageStackName}-OneBayshoreBackendWidgetAccessLogsS3Bucket
            - Effect: Allow
              Action:
                - 'ses:SendEmail'
                - 'ses:Get*'
                - 'ses:List*'
                - 'ses:SendRawEmail'
              Resource:
                - !Sub arn:${AWS::Partition}:ses:${AWS::Region}:${AWS::AccountId}:identity/DoNot-Reply@bayshore.ca
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${NetworkStackName}-PrivateSubnet1Id
          - Fn::ImportValue: !Sub ${NetworkStackName}-PrivateSubnet2Id
        SecurityGroupIds:
          - !Ref SecurityGroup
      Events:
        CronHealthCheckEvent:
          Type: Schedule
          Properties:
            Schedule: rate(1 hour)
            Input: '{ "httpMethod": "GET", "path": "/onebay-api/api/v3/healthcheck", "queryParams": { "source": "cron" }, "requestContext": {} }'
        CronSyncJobShiftBoardToSharepointEvent:
          Type: Schedule
          Properties:
            Schedule: rate(20 minutes)
            Input: '{ "httpMethod": "PUT", "path": "/onebay-api/api/v3/healthcheck/job-board/sync", "requestContext": {}}'
        CronDashboardMetricsEvent:
          Type: Schedule
          Properties:
            Schedule: rate(15 minutes)
            Input: '{ "httpMethod": "GET", "path": "/onebay-api/api/v3/healthcheck/metrics/sync", "requestContext": {}}'
        CronDeleteWellnessImagesEvent:
          Type: Schedule
          Properties:
            Schedule: !Sub rate(${DeleteWellnessImagesCronJobRate})
            Input: '{ "httpMethod": "DELETE", "path": "/onebay-api/api/v3/visits/wellness", "requestContext": {}}'
      Tags:
        Project: !Sub '${EnvironmentName}-onebayshore'
  CacheClusterFromLambdaIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId:
        Fn::ImportValue: !Sub ${CacheStackName}-SecurityGroup
      IpProtocol: tcp
      ToPort: !Ref RedisPort
      FromPort: !Ref RedisPort
      SourceSecurityGroupId: !Ref SecurityGroup
  #getVisitsByDates
  ErrorMetricVisitDetail:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterName: !Sub ${EnvironmentName}-${ApplicationName}-GetVisitDetailsByVisitIdLambdaFilter
      FilterPattern: 'CONTROLLER getVisitDetailsByVisitId FAILED'
      LogGroupName: !Sub /aws/lambda/${EnvironmentName}-${ApplicationName}
      MetricTransformations:
        - MetricValue: '1'
          MetricNamespace: !Sub ${EnvironmentName}-${ApplicationName}-LambdaMetric
          MetricName: "Error in '[CONTROLLER] [getVisitDetailsByVisitId] FAILED'"
  ErrorCWAlarmVisitDetail:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Sub ${EnvironmentName}-${ApplicationName}-getVisitDetailsByVisitId
      AlarmDescription: !Sub ${EnvironmentName}-${ApplicationName}-getVisitDetailsByVisitId
      MetricName: "Error in '[CONTROLLER] [getVisitDetailsByVisitId] FAILED'"
      Namespace: !Sub ${EnvironmentName}-${ApplicationName}-LambdaMetric
      Statistic: 'Average'
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '1'
      ComparisonOperator: 'GreaterThanOrEqualToThreshold'
      TreatMissingData: 'notBreaching'
  EventRuleAPIVisitDetail:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub ${EnvironmentName}-${ApplicationName}-Alarm Notification Rule
      EventBusName: default
      EventPattern:
        source:
          - aws.cloudwatch
        detail-type:
          - CloudWatch Alarm State Change
        resources:
          - !Sub 'arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${EnvironmentName}-${ApplicationName}-getVisitDetailsByVisitId'
        detail:
          alarmName:
            - !Sub ${EnvironmentName}-${ApplicationName}-getVisitDetailsByVisitId
          state:
            value:
              - ALARM
      Name: !Sub '${EnvironmentName}-${ApplicationName}-lambda-ruleByVisitId'
      State: ENABLED
      Targets:
        - Id: !Sub ${EnvironmentName}-${ApplicationName}-getVisitDetailsByVisitId
          Arn:
            Fn::ImportValue: !Sub '${SnsStackName}-DXPOBMonitoringAlertTopic'
          InputTransformer:
            InputTemplate: !Sub
              - |
                {
                      "version": "1.0",
                      "source": "custom",
                      "content": {
                        "textType": "client-markdown",
                        "title": ":rotating_light: !!Alert!! Error in <alarmName> at <at>",
                        "description": "*`[CONTROLLER] [getVisitDetailsByVisitId] FAILED`*",
                        "nextSteps": [
                        "Please Check <https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F${EnvironmentName}-${ApplicationName}|cloudwatch logs> for details"
                        ]              
                      }
                }
              - Region: !Sub '${AWS::Region}'
            InputPathsMap:
              at: $.time
              alarmName: '$.detail.alarmName'
  #getVisitsByDates
  ErrorMetricVisitListing:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterName: !Sub ${EnvironmentName}-${ApplicationName}-getVisitsByDatesLambdaFilter
      FilterPattern: 'CONTROLLER getVisitsByDates Api FAILED'
      LogGroupName: !Sub /aws/lambda/${EnvironmentName}-${ApplicationName}
      MetricTransformations:
        - MetricValue: '1'
          MetricNamespace: !Sub ${EnvironmentName}-${ApplicationName}-LambdaMetric
          MetricName: 'Error in [getVisitsByDates] visit listing'
  ErrorCWAlarmVisitListing:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Sub ${EnvironmentName}-${ApplicationName}-getVisitsByDates
      AlarmDescription: !Sub ${EnvironmentName}-${ApplicationName}-getVisitsByDates
      MetricName: 'Error in [getVisitsByDates] visit listing'
      Namespace: !Sub ${EnvironmentName}-${ApplicationName}-LambdaMetric
      Statistic: 'Average'
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '1'
      ComparisonOperator: 'GreaterThanOrEqualToThreshold'
      TreatMissingData: 'notBreaching'
  EventRuleAPIVisitListing:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub ${EnvironmentName}-${ApplicationName}-Alarm Notification Rule
      EventBusName: default
      EventPattern:
        source:
          - aws.cloudwatch
        detail-type:
          - CloudWatch Alarm State Change
        resources:
          - !Sub 'arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${EnvironmentName}-${ApplicationName}-getVisitsByDates'
        detail:
          alarmName:
            - !Sub ${EnvironmentName}-${ApplicationName}-getVisitsByDates
          state:
            value:
              - ALARM
      Name: !Sub '${EnvironmentName}-${ApplicationName}-lambda-ruleVisitListing'
      State: ENABLED
      Targets:
        - Id: !Sub ${EnvironmentName}-${ApplicationName}-getVisitsByDates
          Arn:
            Fn::ImportValue: !Sub '${SnsStackName}-DXPOBMonitoringAlertTopic'
          InputTransformer:
            InputTemplate: !Sub
              - |
                {
                      "version": "1.0",
                      "source": "custom",
                      "content": {
                        "textType": "client-markdown",
                        "title": ":rotating_light: !!Alert!! Error in <alarmName> at <at>",
                        "description": "*`[CONTROLLER] [getVisitsByDates] Api FAILED`*",
                        "nextSteps": [
                        "Please Check <https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F${EnvironmentName}-${ApplicationName}|cloudwatch logs> for details"
                        ]              
                      }
                }
              - Region: !Sub '${AWS::Region}'
            InputPathsMap:
              at: $.time
              alarmName: '$.detail.alarmName'
  #visitCheckin
  ErrorMetricVisitCheckin:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterName: !Sub ${EnvironmentName}-${ApplicationName}-visitCheckin
      FilterPattern: 'CONTROLLER visitCheckin FAILED'
      LogGroupName: !Sub /aws/lambda/${EnvironmentName}-${ApplicationName}
      MetricTransformations:
        - MetricValue: '1'
          MetricNamespace: !Sub ${EnvironmentName}-${ApplicationName}-LambdaMetric
          MetricName: 'Error in [visitCheckin] while Visit Checkin'
  ErrorCWAlarmVisitCheckin:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Sub ${EnvironmentName}-${ApplicationName}-visitCheckin
      AlarmDescription: !Sub ${EnvironmentName}-${ApplicationName}-visitCheckin
      MetricName: 'Error in [visitCheckin] while Visit Checkin'
      Namespace: !Sub ${EnvironmentName}-${ApplicationName}-LambdaMetric
      Statistic: 'Average'
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '1'
      ComparisonOperator: 'GreaterThanOrEqualToThreshold'
      TreatMissingData: 'notBreaching'
  EventRuleAPIVisitCheckin:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub ${EnvironmentName}-${ApplicationName}-Alarm Notification Rule
      EventBusName: default
      EventPattern:
        source:
          - aws.cloudwatch
        detail-type:
          - CloudWatch Alarm State Change
        resources:
          - !Sub 'arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${EnvironmentName}-${ApplicationName}-visitCheckin'
        detail:
          alarmName:
            - !Sub ${EnvironmentName}-${ApplicationName}-visitCheckin
          state:
            value:
              - ALARM
      Name: !Sub '${EnvironmentName}-${ApplicationName}-lambda-rulevisitCheckin'
      State: ENABLED
      Targets:
        - Id: !Sub ${EnvironmentName}-${ApplicationName}-visitCheckin
          Arn:
            Fn::ImportValue: !Sub '${SnsStackName}-DXPOBMonitoringAlertTopic'
          InputTransformer:
            InputTemplate: !Sub
              - |
                {
                      "version": "1.0",
                      "source": "custom",
                      "content": {
                        "textType": "client-markdown",
                        "title": ":rotating_light: !!Alert!! Error in <alarmName> at <at>",
                        "description": "*`[CONTROLLER] [visitCheckin] FAILED`*",
                        "nextSteps": [
                        "Please Check <https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F${EnvironmentName}-${ApplicationName}|cloudwatch logs> for details"
                        ]              
                      }
                }
              - Region: !Sub '${AWS::Region}'
            InputPathsMap:
              at: $.time
              alarmName: '$.detail.alarmName'
  #visitCheckout
  ErrorMetricVisitCheckout:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterName: !Sub ${EnvironmentName}-${ApplicationName}-visitCheckout
      FilterPattern: 'CONTROLLER visitCheckout FAILED'
      LogGroupName: !Sub /aws/lambda/${EnvironmentName}-${ApplicationName}
      MetricTransformations:
        - MetricValue: '1'
          MetricNamespace: !Sub ${EnvironmentName}-${ApplicationName}-LambdaMetric
          MetricName: 'Error in [visitCheckout] while Visit Checkout'
  ErrorCWAlarmVisitCheckout:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Sub ${EnvironmentName}-${ApplicationName}-visitCheckout
      AlarmDescription: !Sub ${EnvironmentName}-${ApplicationName}-visitCheckout
      MetricName: 'Error in [visitCheckout] while Visit Checkout'
      Namespace: !Sub ${EnvironmentName}-${ApplicationName}-LambdaMetric
      Statistic: 'Average'
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '1'
      ComparisonOperator: 'GreaterThanOrEqualToThreshold'
      TreatMissingData: 'notBreaching'
  EventRuleAPIVisitCheckout:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub ${EnvironmentName}-${ApplicationName}-Alarm Notification Rule
      EventBusName: default
      EventPattern:
        source:
          - aws.cloudwatch
        detail-type:
          - CloudWatch Alarm State Change
        resources:
          - !Sub 'arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${EnvironmentName}-${ApplicationName}-visitCheckout'
        detail:
          alarmName:
            - !Sub ${EnvironmentName}-${ApplicationName}-visitCheckout
          state:
            value:
              - ALARM
      Name: !Sub '${EnvironmentName}-${ApplicationName}-lambda-rulevisitCheckout'
      State: ENABLED
      Targets:
        - Id: !Sub ${EnvironmentName}-${ApplicationName}-visitCheckout
          Arn:
            Fn::ImportValue: !Sub '${SnsStackName}-DXPOBMonitoringAlertTopic'
          InputTransformer:
            InputTemplate: !Sub
              - |
                {
                      "version": "1.0",
                      "source": "custom",
                      "content": {
                        "textType": "client-markdown",
                        "title": ":rotating_light: !!Alert!! Error in <alarmName> at <at>",
                        "description": "*`[CONTROLLER] [visitCheckout] FAILED`*",
                        "nextSteps": [
                        "Please Check <https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F${EnvironmentName}-${ApplicationName}|cloudwatch logs> for details"
                        ]              
                      }
                }
              - Region: !Sub '${AWS::Region}'
            InputPathsMap:
              at: $.time
              alarmName: '$.detail.alarmName'
  #enrollUserInSystem
  ErrorMetricEnrollment:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterName: !Sub ${EnvironmentName}-${ApplicationName}-enrollUserInSystem
      FilterPattern: 'CONTROLLER enrollUserInSystem Auto enrollment FAILED'
      LogGroupName: !Sub /aws/lambda/${EnvironmentName}-${ApplicationName}
      MetricTransformations:
        - MetricValue: '1'
          MetricNamespace: !Sub ${EnvironmentName}-${ApplicationName}-LambdaMetric
          MetricName: "Error in '[enrollUserInSystem] while enrolling an Employee'"
  ErrorCWAlarmEnrollment:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Sub ${EnvironmentName}-${ApplicationName}-enrollUserInSystem
      AlarmDescription: !Sub ${EnvironmentName}-${ApplicationName}-enrollUserInSystem
      MetricName: "Error in '[enrollUserInSystem] while enrolling an Employee'"
      Namespace: !Sub ${EnvironmentName}-${ApplicationName}-LambdaMetric
      Statistic: 'Average'
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '1'
      ComparisonOperator: 'GreaterThanOrEqualToThreshold'
      TreatMissingData: 'notBreaching'
  EventRuleAPIEnrollment:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub ${EnvironmentName}-${ApplicationName}-Alarm Notification Rule
      EventBusName: default
      EventPattern:
        source:
          - aws.cloudwatch
        detail-type:
          - CloudWatch Alarm State Change
        resources:
          - !Sub 'arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${EnvironmentName}-${ApplicationName}-enrollUserInSystem'
        detail:
          alarmName:
            - !Sub ${EnvironmentName}-${ApplicationName}-enrollUserInSystem
          state:
            value:
              - ALARM
      Name: !Sub '${EnvironmentName}-${ApplicationName}-lambda-ruleEnrollUser'
      State: ENABLED
      Targets:
        - Id: !Sub ${EnvironmentName}-${ApplicationName}-enrollUserInSystem
          Arn:
            Fn::ImportValue: !Sub '${SnsStackName}-DXPOBMonitoringAlertTopic'
          InputTransformer:
            InputTemplate: !Sub
              - |
                {
                      "version": "1.0",
                      "source": "custom",
                      "content": {
                        "textType": "client-markdown",
                        "title": ":rotating_light: !!Alert!! Error in <alarmName> at <at>",
                        "description": "*`[CONTROLLER] [enrollUserInSystem] Auto enrollment FAILED`*",
                        "nextSteps": [
                        "Please Check <https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F${EnvironmentName}-${ApplicationName}|cloudwatch logs> for details"
                        ]              
                      }
                }
              - Region: !Sub '${AWS::Region}'
            InputPathsMap:
              at: $.time
              alarmName: '$.detail.alarmName'
  #getSelfUserDetails
  ErrorMetricUserAccess:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterName: !Sub ${EnvironmentName}-${ApplicationName}-getSelfUserDetails
      FilterPattern: 'CONTROLLER getSelfUserDetails FAILED'
      LogGroupName: !Sub /aws/lambda/${EnvironmentName}-${ApplicationName}
      MetricTransformations:
        - MetricValue: '1'
          MetricNamespace: !Sub ${EnvironmentName}-${ApplicationName}-LambdaMetric
          MetricName: "Error in 'Error in [getSelfUserDetails] while Logging in to the app/website'"
  ErrorCWUserAccess:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Sub ${EnvironmentName}-${ApplicationName}-getSelfUserDetails
      AlarmDescription: !Sub ${EnvironmentName}-${ApplicationName}-getSelfUserDetails
      MetricName: "Error in 'Error in [getSelfUserDetails] while Logging in to the app/website'"
      Namespace: !Sub ${EnvironmentName}-${ApplicationName}-LambdaMetric
      Statistic: 'Average'
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '1'
      ComparisonOperator: 'GreaterThanOrEqualToThreshold'
      TreatMissingData: 'notBreaching'
  EventRuleAPIUserDetails:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub ${EnvironmentName}-${ApplicationName}-Alarm Notification Rule
      EventBusName: default
      EventPattern:
        source:
          - aws.cloudwatch
        detail-type:
          - CloudWatch Alarm State Change
        resources:
          - !Sub 'arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${EnvironmentName}-${ApplicationName}-getSelfUserDetails'
        detail:
          alarmName:
            - !Sub ${EnvironmentName}-${ApplicationName}-getSelfUserDetails
          state:
            value:
              - ALARM
      Name: !Sub '${EnvironmentName}-${ApplicationName}-lambda-ruleUserDetails'
      State: ENABLED
      Targets:
        - Id: !Sub ${EnvironmentName}-${ApplicationName}-getSelfUserDetails
          Arn:
            Fn::ImportValue: !Sub '${SnsStackName}-DXPOBMonitoringAlertTopic'
          InputTransformer:
            InputTemplate: !Sub
              - |
                {
                      "version": "1.0",
                      "source": "custom",
                      "content": {
                        "textType": "client-markdown",
                        "title": ":rotating_light: !!Alert!! Error in <alarmName> at <at>",
                        "description": "*`[CONTROLLER] getSelfUserDetails FAILED`*",
                        "nextSteps": [
                        "Please Check <https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F${EnvironmentName}-${ApplicationName}|cloudwatch logs> for details"
                        ]              
                      }
                }
              - Region: !Sub '${AWS::Region}'
            InputPathsMap:
              at: $.time
              alarmName: '$.detail.alarmName'

Outputs:
  LambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${ApiGwIntegrationLambda}'
  LambdaFunctionArn:
    Description: Lambda Function Arn for Api GW intergation.
    Value: !GetAtt ApiGwIntegrationLambda.Arn
